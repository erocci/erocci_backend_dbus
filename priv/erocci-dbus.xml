<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd" >
<node
    xmlns="https://raw.githubusercontent.com/kbirken/dbus-emf-model/master/plugins/model.emf.dbusxml/spec/introspect.xsd"
    xmlns:xs="http://www.w3.org/2001/XMLSchema" >
  <xs:annotation>
    <xs:documentation>
      erocci backends D-Bus interfaces
    </xs:documentation>
    <xs:documentation>
      (C) 2015 Jean Parpaillon; released under Apache Public License 2.0
    </xs:documentation>
    <xs:documentation>
      Backend interfaces are made up of one required and two optional
      interfaces:
      * org.ow2.erocci.backend: required, handle basic entities/collections operations
      * org.ow2.erocci.backend.mixin: optional, handle user mixin creation/deletion
      * org.ow2.erocci.backend.action: optional, handle entities actions
    </xs:documentation>
    <xs:documentation>
      TODO: in case '...action' is not supported, should runtime
      forbid schemas with actions or ignore them ?
    </xs:documentation>
  </xs:annotation>
  
  <interface name="org.ow2.erocci.backend.core">
    <xs:annotation>
      <xs:documentation>Core interface for erocci backend</xs:documentation>
    </xs:annotation>
    
    <method name="Init" >
      <xs:annotation>
        <xs:documentation>Initialize the backend</xs:documentation>
        <xs:documentation>
          In:
          * opts: a list of key-value pairs, backend specific
        </xs:documentation>
      </xs:annotation>

      <arg name="opts" type="a{sv}" direction="in" />
    </method>

    <method name="Terminate" >
      <xs:annotation>
        <xs:documentation>Terminate the backend</xs:documentation>
      </xs:annotation>
    </method>
    
    <method name="SaveResource" >
      <xs:annotation>
        <xs:documentation>Creates a resource instance</xs:documentation>
        <xs:documentation>
          In:
          * id (string): resource path relative part
          If empty, id must be generated by backend
          * kind (string): category id
          * mixins (string array): list of category id
          * attributes (string-variant array): resource attributes
          * owner (string): resource owner (opaque)
        </xs:documentation>
        <xs:documentation>
          Out:
          * id (string): resource path relative part
        </xs:documentation>
      </xs:annotation>
      
      <arg name="id" type="s" direction="in" />
      <arg name="kind" type="s" direction="in" />
      <arg name="mixins" type="as" direction="in" />
      <arg name="attributes" type="a{sv}" direction="in" />
      <arg name="owner" type="s" direction="in" />

      <arg name="id" type="s" direction="out" />
    </method>

    <method name="SaveLink" >
      <xs:annotation>
        <xs:documentation>Creates a link instance</xs:documentation>
        <xs:documentation>
          In:
          * id (string): link path relative part
          If empty, id must be generated by backend
          * kind (string): category id
          * mixins (string array): list of category id
          * src (string): link source url
          * target (string): link target url
          * attributes (string-variant array): link attributes
          * owner (string): link owner (opaque)
        </xs:documentation> 
        <xs:documentation>
          Out:
          * id (string): link path relative part
        </xs:documentation>
        <xs:documentation>
          `src` and `target` can be path relative url part, in case it
          points to a resource hosted by the backend
        </xs:documentation>
      </xs:annotation>
      
      <arg name="id" type="s" direction="in" />
      <arg name="kind" type="s" direction="in" />
      <arg name="mixins" type="as" direction="in" />
      <arg name="src" type="s" direction="in" />
      <arg name="target" type="s" direction="in" />
      <arg name="attributes" type="a{sv}" direction="in" />
      <arg name="owner" type="s" direction="in" />

      <arg name="id" type="s" direction="out" />      
    </method>

    <method name="Update" >
      <xs:annotation>
        <xs:documentation>Update an existing entity</xs:documentation>
        <xs:documentation>
          In:
          * id (string): entity path relative url part
          * attributes (string-variant array): updated entity attributes
        </xs:documentation>
        <xs:documentation>
          Out:
          * attributes (string-variant array): full list of entity attributes
        </xs:documentation>
      </xs:annotation>
      
      <arg name="id" type="s" direction="in" />
      <arg name="attributes" type="a{sv}" direction="in" />

      <arg name="attributes" type="a{sv}" direction="out" />
    </method>

    <method name="SaveMixin" >
      <xs:annotation>
        <xs:documentation>Set full mixin collection</xs:documentation>
        <xs:documentation>
          In:
          * id (string): mixin category id
          * entities (string array): full collection of array of path
          relative url part of entities
        </xs:documentation>
      </xs:annotation>
      
      <arg name="id" type="s" direction="in" />
      <arg name="entities" type="as" direction="in" />
    </method>

    <method name="UpdateMixin" >
      <xs:annotation>
        <xs:documentation>Update mixin collection</xs:documentation>
        <xs:documentation>
          In:
          * id (string): mixin category id
          * entities (string array): array of path relative url part
          of entities to add to the mixin collection
        </xs:documentation>
      </xs:annotation>
      
      <arg name="id" type="s" direction="in" />
      <arg name="entities" type="as" direction="in" />
    </method>

    <method name="Find" >
      <xs:annotation>
        <xs:documentation>Retrieve node metadata (entity, collection, ...)</xs:documentation>
        <xs:documentation>
          In:
          * id (string): path relative url part
        </xs:documentation>
        <xs:documentation>
          Out:
          * entitites (array): (possibly empty) array of entities metadata:
          * (byte): type (0: entity, 1: unbounded collection)
          * (variant): backend internal opaque id
          * (string): owner
          * (string): serial
        </xs:documentation>
      </xs:annotation>
      
      <arg name="id" type="s" direction="in" />

      <arg name="entities" type="a(yvsu)" direction="out" />
    </method>

    <method name="Load" >
      <xs:annotation>
        <xs:documentation>Load entity data</xs:documentation>
        <xs:documentation>
          In:
          * id (string): opaque_id
        </xs:documentation>
        <xs:documentation>
          Out:
          * id (string): path relative url part
          * kind (string): category id
          * mixins (string array): category ids
          * attributes (string-variant array): entity attributes,
          including core attribute (occi.core.source and occi.core.target)      
        </xs:documentation>
      </xs:annotation>
      
      <arg name="opaque_id" type="v" direction="in" />

      <arg name="id" type="s" direction="out" />
      <arg name="kind" type="s" direction="out" />
      <arg name="mixins" type="as" direction="out" />
      <arg name="attributes" type="a{sv}" direction="out" />
    </method>

    <method name="List" >
      <xs:annotation>
        <xs:documentation>Get an iterator on a collection</xs:documentation>
        <xs:documentation>
          In:
          * id (string): category id or path relative url part
          * filters (string-variant array): key-value specified
          filters (TO BE DEFINED)
        </xs:documentation>
        <xs:documentation>
          Out:
          * opaque_id (variant): internal collection id
          * serial (unsigned int): collection serial
        </xs:documentation>
      </xs:annotation>
      
      <arg name="id" type="s" direction="in" />
      <arg name="filters" type="a{sv}" direction="in" />

      <arg name="opaque_id" type="v" direction="out" />
      <arg name="serial" type="u" direction="out" />
    </method>

    <method name="Next" >
      <xs:annotation>
        <xs:documentation>Retrieve items of a collection</xs:documentation>
        <xs:documentation>
          In:
          * opaque_id (variant): collection internal id
          * start (unsigned int): first item index (start with 0)
          * items (unsigned int): number of items
        </xs:documentation>
        <xs:documentation>
          Out:
          * entities (array): collection items array
          (string): path relative url part
          (string): item owner
        </xs:documentation>
      </xs:annotation>

      <arg name="opaque_id" type="v" direction="in" />
      <arg name="start" type="u" direction="in" />
      <arg name="items" type="u" direction="in" />

      <arg name="entities" type="a(ss)" direction="out" />
    </method>

    <method name="Delete" >
      <xs:annotation>
        <xs:documentation>Delete an entity or collection</xs:documentation>
        <xs:documentation>
          In:
          * id (string):
          * if full url: category id (bounded collection)
          * if path relative url part: unbounded collection or entity
        </xs:documentation>
      </xs:annotation>
      
      <arg name="id" type="s" direction="in" />
    </method>

    <property name="schema" type="s" access="read" >
      <xs:annotation>
        <xs:documentation>XML encoded OCCI categories</xs:documentation>
        <xs:documentation>
          TODO: allow more abstract representation ?
        </xs:documentation>
      </xs:annotation>
    </property>
  </interface>
  
  <interface name="org.ow2.erocci.backend.mixin">
    <xs:annotation>
      <xs:documentation>Optional interface for handling user mixins</xs:documentation>
    </xs:annotation>
    
    <method name="AddMixin" >
      <xs:annotation>
        <xs:documentation>Register a user mixin</xs:documentation>
        <xs:documentation>
          In:
          * id (string): user mixin category if
          * location (sting): relative path url part
          * owner (string): user mixin owner (opaque)
        </xs:documentation>
      </xs:annotation>
      
      <arg name="id" type="s" direction="in" />
      <arg name="location" type="s" direction="in" />
      <arg name="owner" type="s" direction="in" />
    </method>

    <method name="DelMixin" >
      <xs:annotation>
        <xs:documentation>Delete user mixin</xs:documentation>
        <xs:documentation>
          In:
          * id (string): user mixin category id
        </xs:documentation>
      </xs:annotation>
      
      <arg name="id" type="s" direction="in" />
    </method>
  </interface>

  <interface name="org.ow2.erocci.backend.action" >
    <xs:annotation>
      <xs:documentation>Optional interface for handling entities actions</xs:documentation>
    </xs:annotation>
    
    <method name="Action" >
      <xs:annotation>
        <xs:documentation>Called for handling an action on a particular entity</xs:documentation>
        <xs:documentation>
          In:
          * id (string): relative path url part
          * action_id (string): category id identifying the action
          * attributes (string-variant array): action's parameters
        </xs:documentation>
      </xs:annotation>
      
      <arg name="id" type="s" direction="in" />
      <arg name="action_id" type="s" direction="in" />
      <arg name="attributes" type="a{sv}" direction="in" />
    </method>
  </interface>
</node>
