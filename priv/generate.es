#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp enable -sname generate -mnesia debug verbose
-include_lib("xmerl/include/xmerl.hrl").

-define(SCHEMA, "erocci-dbus.xml").

-record(state, {
	  args, 
	  gen   = undefined,
	  name              :: string(),
	  indent = 0,
	  iface
	 }).

main(Args) ->
    try parse_args(Args, #state{}) of
	help ->
	    usage(0);
	#state{gen=undefined} ->
	    usage(1);
	#state{}=S ->
	    run(S)
    catch throw:_ ->
	    usage(1)
    end.


parse_args([], S) ->
    S;
parse_args(["-h" | _], _) ->
    help;
parse_args(["-o", Gen | Tail], S) ->
    S1 = S#state{gen=generator(Gen)},
    parse_args(Tail, S1);
parse_args([Name | Tail], S) ->
    parse_args(Tail, S#state{name=Name}).



generator("python") ->
    python;
generator(_) ->
    undefined.


usage(N) ->
    io:format("Usage: ~s [-h] -o FORMAT NAME~n"
	      "\tFORMAT: python~n"
	     , [filename:basename(escript:script_name())]),
    halt(N).


run(#state{gen=Gen}=S) ->
    {Doc, _Rest} = xmerl_scan:file(get_schema_path()),
    Out = case Gen of
	      python ->
		  gen_python(Doc, S);
	      _ ->
		  throw(unknown_output_format)
	  end,
    io:format(Out).


get_schema_path() ->
    filename:join([filename:dirname(escript:script_name()), ?SCHEMA]).

%%%
%%% Transform functions
%%%
gen_python(#xmlElement{name=node}=E, #state{indent=L, name=Name}=S) ->
    Ifaces = elements(E, interface),
    ["#!/usr/bin/env python\n",
     "#\n",
     io_lib:format("# Generated by ~s\n", [filename:basename(escript:script_name())]),
     "#\n",
     "from gi.repository import Gtk\n",
     "from dbus.mainloop.glib import DBusGMainLoop\n",
     "import signal\n",
     "import dbus\n",
     "import dbus.service\n\n",
     "SERVICE = \"org.ow2.erocci.backend.SampleService\"\n\n",     
     io_lib:format("class ~s(dbus.service.Object):\n", [Name]),
     indent(L+1), "def __init__(self):\n",
     indent(L+2), "bus_name = dbus.service.BusName(SERVICE, bus=dbus.SessionBus())\n",
     indent(L+2), "dbus.service.Object.__init__(self, bus_name, '/')\n",
     "\n",
     [ gen_python(Iface, S#state{indent=L+1}) || Iface <- Ifaces ],
     indent(L+1), "@dbus.service.method(dbus.PROPERTIES_IFACE, in_signature='ss', out_signature='v')\n",
     indent(L+1), "def Get(self, interface_name, property_name):\n",
     indent(L+2), "return \"\"\n\n",
     indent(L+1), "@dbus.service.method(dbus.PROPERTIES_IFACE, in_signature='s', out_signature='a{sv}')\n",
     indent(L+1), "def GetAll(self, interface_name):\n",
     indent(L+2), "return {}\n\n",
     indent(L+1), "@dbus.service.signal(dbus.PROPERTIES_IFACE, signature='sa{sv}as')\n",
     indent(L+1), "def PropertiesChanged(self, interface_name, changed_properties, invalidated_properties):\n",
     indent(L+2), "pass \n\n"
     "\n",
     "signal.signal(signal.SIGINT, signal.SIG_DFL)\n",
     "DBusGMainLoop(set_as_default=True)\n",
     "service = ", Name, "()\n",
     "Gtk.main()\n\n"
    ];
gen_python(#xmlElement{name=interface, content=Content}=E, S) ->
    Name = attr_value(E, name),
    [
     [ gen_python(Method, S#state{iface=Name}) || Method <- Content, 
						  is_record(Method, xmlElement), 
						  Method#xmlElement.name == method ],
     "\n"
    ];
gen_python(#xmlElement{name=method, content=C}=E, #state{indent=L, iface=Iface}=S) ->
    InArgs = [ Arg || Arg <- C, 
		      is_record(Arg, xmlElement), 
		      Arg#xmlElement.name == arg,
		      attr_value(Arg, direction) == "in" ],
    OutArgs = [ Arg || Arg <- C, 
		       is_record(Arg, xmlElement), 
		       Arg#xmlElement.name == arg,
		       attr_value(Arg, direction) == "out" ],
    [
     indent(L),
     "@dbus.service.method(\"", Iface, "\", ",
     "in_signature='", [ gen_python(Arg, S) || Arg <- InArgs ], "', ",
     "out_signature='", [ gen_python(Arg, S) || Arg <- OutArgs ], "')\n",
     indent(L),
     io_lib:format("def ~s(self", [attr_value(E, name)]),
     [ [", ", attr_value(Arg, name)] || Arg <- InArgs ],
     "):\n",
     indent(L+1),
     "return ", gen_python_return(OutArgs),
     "\n\n"
    ];
gen_python(#xmlElement{name=arg}=E, _S) ->
    attr_value(E, type);
gen_python(_, _) ->
    [].

gen_python_return([]) ->
    "";
gen_python_return([Arg]) ->
    gen_python_default(Arg);
gen_python_return(Args) ->
    [ "(", string:join([ gen_python_default(Arg) || Arg <- Args ], ", "), ")" ].


gen_python_default(Arg) ->
    case attr_value(Arg, type) of
	"s" -> "\"\"";
	"a{sv}" -> "{}";
	"as" ->	"[]";
	_ -> "None"
    end.


indent(L) ->
    lists:duplicate(4*L, " ").


elements(#xmlElement{content=C}, Name) ->
    lists:filter(fun (#xmlElement{name=N}) -> 
			 case N of
			     Name -> true;
			     _ -> false
			 end;
		     (_) -> false
		 end, C).

attr_value(#xmlElement{attributes=A}, Name) ->
    [Attr] = lists:filter(fun (#xmlAttribute{name=N}) ->
				  case N of 
				      Name -> true;
				      _ -> false
				  end;
			      (_) -> false
			  end, A),
    Attr#xmlAttribute.value.
